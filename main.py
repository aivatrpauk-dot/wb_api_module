import os
import pytz
import asyncio
import logging
import calendar
import aiohttp

from datetime import datetime
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    FSInputFile
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from apscheduler.schedulers.asyncio import AsyncIOScheduler

import database as db
from analytic_report import (
    create_user_spreadsheet,
    schedule_sheet_deletion,
    fill_pnl_report
)
from wb_api import get_supplier_name
from token_daily_refresh import refresh_token


import redis.asyncio as redis
from aiogram.fsm.storage.redis import RedisStorage

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = "7569142757:AAH_qYkixvV-4mSrcQfnagpIlJJc2YMLCW0"
PHOTO_PATH = Path("start_image.jpeg")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- FSM States ---

class ShopStates(StatesGroup):
    add_shop = State()
    get_api_key = State()
    main_menu = State()
    settings_menu = State()
    change_api_key = State()
    set_tax_rate = State()
    select_start_date = State()
    select_end_date = State()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PHOTO_PATH = Path("start_image.jpeg")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN)
redis_client = redis.from_url(REDIS_URL)
storage = RedisStorage(redis=redis_client)
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def generate_calendar(year: int, month: int):
    keyboard = []

    month_name = calendar.month_name[month]
    header = [InlineKeyboardButton(
        text=f"{month_name} {year}", callback_data="ignore")]
    keyboard.append(header)

    days_of_week = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    week_days = [InlineKeyboardButton(
        text=day, callback_data="ignore") for day in days_of_week]
    keyboard.append(week_days)

    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        week_buttons = []
        for day in week:
            if day == 0:
                week_buttons.append(InlineKeyboardButton(
                    text=" ", callback_data="ignore"))
            else:
                week_buttons.append(InlineKeyboardButton(
                    text=str(day),
                    callback_data=f"day_{year}_{month}_{day}"
                ))
        keyboard.append(week_buttons)

    prev_year, prev_month = (year, month - 1) if month > 1 else (year - 1, 12)
    next_year, next_month = (year, month + 1) if month < 12 else (year + 1, 1)

    navigation = [
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è", callback_data=f"nav_{prev_year}_{prev_month}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        InlineKeyboardButton(
            text="‚û°Ô∏è", callback_data=f"nav_{next_year}_{next_month}")
    ]
    keyboard.append(navigation)

    return keyboard


async def validate_wb_api_key(api_key: str) -> bool:
    url_stat = "https://seller-analytics-api.wildberries.ru/api/v1/supplier/stocks"
    url_ads = "https://advert-api.wildberries.ru/adv/v0/adverts"
    headers = {"Authorization": api_key}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url_stat, headers=headers, timeout=30) as resp:
                if resp.status == 401:
                    return False
                if resp.status != 200:
                    async with session.get("https://seller-analytics-api.wildberries.ru/ping", headers=headers, timeout=10) as ping:
                        if ping.status != 200:
                            return False
        except Exception as e:
            logger.error(f"Stat API error: {e}")
            return False

        try:
            async with session.get(url_ads, headers=headers, timeout=10) as resp:
                if resp.status == 401:
                    return False
                if resp.status != 200:
                    async with session.get("https://advert-api.wildberries.ru/ping", headers=headers, timeout=10) as ping:
                        if ping.status != 200:
                            return False
        except Exception as e:
            logger.error(f"Ads API error: {e}")
            return False

    return True


async def send_main_menu(message_or_query, text: str = ""):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –§–∏–Ω. –æ—Ç—á—ë—Ç",
                              callback_data="fin_report")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞",
                              callback_data="settings")],
        [InlineKeyboardButton(text="‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞",
                              callback_data="subscription")],
    ])

    caption = f"{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    if isinstance(message_or_query, Message):
        if PHOTO_PATH.exists():
            await message_or_query.answer_photo(
                photo=FSInputFile(PHOTO_PATH),
                caption=caption,
                reply_markup=keyboard
            )
        else:
            await message_or_query.answer(text=caption, reply_markup=keyboard)
    else:  # CallbackQuery
        try:
            await message_or_query.message.delete()
        except:
            pass
        if PHOTO_PATH.exists():
            await bot.send_photo(
                chat_id=message_or_query.from_user.id,
                photo=FSInputFile(PHOTO_PATH),
                caption=caption,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                chat_id=message_or_query.from_user.id,
                text=caption,
                reply_markup=keyboard
            )


async def send_settings_menu(user_id: int):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –ò–∑–º–µ–Ω–∏—Ç—å API-–∫–ª—é—á",
                              callback_data="change_api")],
        [InlineKeyboardButton(text="üßæ –ù–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞",
                              callback_data="set_tax")],
        [InlineKeyboardButton(
            text="üì¶ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–æ–≤", callback_data="cost_price")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
    ])
    await bot.send_message(chat_id=user_id, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞", reply_markup=keyboard)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    user = message.from_user
    db.add_user(user.id)
    api_key, _, _, shop_name = db.get_user_data(user.id)

    if not api_key:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω",
                                  callback_data="add_shop")]
        ])
        caption = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –Ω–∞ Wildberries. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω."

        if PHOTO_PATH.exists():
            await message.answer_photo(photo=FSInputFile(PHOTO_PATH), caption=caption, reply_markup=keyboard)
        else:
            await message.answer(text=caption, reply_markup=keyboard)
        await state.set_state(ShopStates.add_shop)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞–≥–∞–∑–∏–Ω–∞
        shop_display = shop_name or "–ú–∞–≥–∞–∑–∏–Ω"
        await send_main_menu(message, f"–í–∞—à –∫–∞–±–∏–Ω–µ—Ç:\n–ú–∞–≥–∞–∑–∏–Ω: {shop_display}")
        await state.set_state(ShopStates.main_menu)


@dp.callback_query(F.data == "add_shop", StateFilter(ShopStates.add_shop))
async def prompt_add_shop(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API-–∫–ª—é—á Wildberries (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ x64).")
    await state.set_state(ShopStates.get_api_key)


@dp.message(StateFilter(ShopStates.get_api_key))
async def save_api_key(message: Message, state: FSMContext):
    api_key = message.text.strip()
    user_id = message.from_user.id

    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é API-–∫–ª—é—á...")
    is_valid = await validate_wb_api_key(api_key)

    if not is_valid:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–ª—é—á –æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (x64) –∏ –æ–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫:\n"
            "‚Ä¢ Seller Analytics API\n‚Ä¢ Advert API"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    shop_name = await get_supplier_name(api_key)

    logger.info(f"User {user_id} added shop: {shop_name}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ –ë–î
    db.update_api_key(user_id, api_key)
    db.update_shop_name(user_id, shop_name)
    try:
        await message.delete()
    except:
        pass
    _, _, sheet_link, _ = db.get_user_data(user_id)
    if not sheet_link:
        await message.answer("üìä –°–æ–∑–¥–∞—é –≤–∞—à—É –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
        sheet_link = await create_user_spreadsheet(user_id, shop_name)
        if sheet_link:
            db.update_google_sheet_link(user_id, sheet_link)
            await message.answer(f"‚úÖ –í–∞—à–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {sheet_link}")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É.")

    await message.answer("‚úÖ API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
    await send_main_menu(message)
    await state.set_state(ShopStates.main_menu)


@dp.callback_query(F.data == "fin_report", StateFilter(ShopStates.main_menu))
async def prompt_fin_report(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass
    now = datetime.now()
    keyboard = generate_calendar(now.year, now.month)
    await callback.message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(ShopStates.select_start_date)


@dp.callback_query(StateFilter(ShopStates.select_start_date, ShopStates.select_end_date))
async def handle_calendar_selection(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    await callback.answer()

    if data.startswith("nav_"):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        _, year, month = data.split("_")
        keyboard = generate_calendar(int(year), int(month))
        await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        return

    elif data == "cancel":
        # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            await callback.message.delete()
        except:
            pass
        await send_main_menu(callback)
        await state.set_state(ShopStates.main_menu)
        return

    elif data.startswith("day_"):
        _, year, month, day = data.split("_")
        selected_date = datetime(int(year), int(month), int(day))
        date_str = selected_date.isoformat()  # ‚Üê —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É

        current_state = await state.get_state()
        user_data = await state.get_data()

        if current_state == ShopStates.select_start_date.state:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            await state.update_data(start_date=date_str)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
            keyboard = generate_calendar(
                selected_date.year, selected_date.month)
            await callback.message.edit_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            await state.set_state(ShopStates.select_end_date)

        elif current_state == ShopStates.select_end_date.state:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            await state.update_data(end_date=date_str)
            await generate_and_send_report(callback, state)
            await state.set_state(ShopStates.main_menu)

    else:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ignore")
        await callback.answer()


async def generate_and_send_report(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass

    user_id = callback.from_user.id
    user_data = await state.get_data()
    start_date_str = user_data.get("start_date")
    end_date_str = user_data.get("end_date")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(start_date=None, end_date=None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞—Ç
    if not start_date_str or not end_date_str:
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—ã –æ—Ç—á—ë—Ç–∞.")
        await send_main_menu(callback)
        return

    try:
        start_date = datetime.fromisoformat(start_date_str)
        end_date = datetime.fromisoformat(end_date_str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç: {e}")
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç.")
        await send_main_menu(callback)
        return

    msg = await bot.send_message(
        user_id,
        f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}..."
    )

    report_result, report_url = await generate_financial_report(user_id, start_date, end_date)

    if report_url:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á—ë—Ç", url=report_url)]
        ])
        await msg.edit_text(report_result, reply_markup=keyboard)
    else:
        await msg.edit_text(report_result)

    await send_main_menu(callback)


async def generate_financial_report(user_id, start_date, end_date):
    api_key, _, sheet_id, _ = db.get_user_data(user_id)
    if not api_key:
        return "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –º–∞–≥–∞–∑–∏–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", None

    report_url = await fill_pnl_report(sheet_id, user_id, start_date, end_date)

    asyncio.create_task(schedule_sheet_deletion(sheet_id))
    return "üìä –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω 12 —á–∞—Å–æ–≤.",  report_url


@dp.callback_query(F.data == "settings", StateFilter(ShopStates.main_menu))
async def show_settings_menu_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_settings_menu(callback.from_user.id)
    await state.set_state(ShopStates.settings_menu)


@dp.callback_query(F.data == "change_api", StateFilter(ShopStates.settings_menu))
async def prompt_change_api(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass
    back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]])
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π API-–∫–ª—é—á Wildberries (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ x64).", reply_markup=back_kb)
    await state.set_state(ShopStates.change_api_key)


@dp.message(StateFilter(ShopStates.change_api_key))
async def save_new_api_key(message: Message, state: FSMContext):
    if message.text.startswith("‚¨ÖÔ∏è"):
        await send_settings_menu(message.from_user.id)
        await state.set_state(ShopStates.settings_menu)
        return

    api_key = message.text.strip()
    user_id = message.from_user.id

    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–π API-–∫–ª—é—á...")
    is_valid = await validate_wb_api_key(api_key)

    if not is_valid:
        back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]])
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á.", reply_markup=back_kb)
        return

    shop_name = await get_supplier_name(api_key)
    db.update_api_key(user_id, api_key)
    db.update_shop_name(user_id, shop_name)
    try:
        await message.delete()
    except:
        pass
    await message.answer("‚úÖ API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await send_settings_menu(user_id)
    await state.set_state(ShopStates.settings_menu)


@dp.callback_query(F.data == "set_tax", StateFilter(ShopStates.settings_menu))
async def prompt_set_tax_rate(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]])
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6 –¥–ª—è –£–°–ù 6%).", reply_markup=back_kb)
    await state.set_state(ShopStates.set_tax_rate)


@dp.message(StateFilter(ShopStates.set_tax_rate))
async def save_tax_rate(message: Message, state: FSMContext):
    if message.text.startswith("‚¨ÖÔ∏è"):
        await send_settings_menu(message.from_user.id)
        await state.set_state(ShopStates.settings_menu)
        return

    try:
        rate = float(message.text.replace(",", "."))
        if 0 <= rate <= 100:
            db.update_tax_rate(message.from_user.id, rate)
            await message.answer(f"‚úÖ –ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {rate} %")
            await send_settings_menu(message.from_user.id)
            await state.set_state(ShopStates.settings_menu)
        else:
            raise ValueError
    except ValueError:
        back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]])
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.", reply_markup=back_kb)


@dp.callback_query(F.data == "cost_price", StateFilter(ShopStates.settings_menu))
async def get_cost_price_sheet(callback: CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    _, _, sheet_link, _ = db.get_user_data(user_id)

    if not sheet_link:
        await callback.message.answer("üìä –°–æ–∑–¥–∞—é –≤–∞—à—É –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
        sheet_link = await create_user_spreadsheet(user_id, f"–ú–∞–≥–∞–∑–∏–Ω_{user_id}")
        if sheet_link:
            db.update_google_sheet_link(user_id, sheet_link)
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
            return

    back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]])
    await callback.message.edit_text(
        f"üìä –í–∞—à–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n\n{sheet_link}\n\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º.",
        reply_markup=back_kb
    )


@dp.callback_query(F.data == "subscription", StateFilter(ShopStates.main_menu))
async def show_subscription_info(callback: CallbackQuery):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass
    back_kb = InlineKeyboardMarkup(inline_keyboard=[
                                   [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
    await callback.message.answer(
        "‚≠êÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ 31.12.2025.\n\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
        reply_markup=back_kb
    )


@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_main_menu(callback)
    await state.set_state(ShopStates.main_menu)


@dp.callback_query(F.data == "back_to_settings", StateFilter(ShopStates.change_api_key, ShopStates.set_tax_rate))
async def back_to_settings_from_input(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_settings_menu(callback.from_user.id)
    await state.set_state(ShopStates.settings_menu)


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    db.init_db()

    try:
        scheduler.remove_job("daily_refresh_token")
    except:
        pass

    scheduler.add_job(
        refresh_token,
        'cron',
        hour=0,
        minute=1,
        timezone=MOSCOW_TZ,
        id="daily_refresh_token"
    )

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
