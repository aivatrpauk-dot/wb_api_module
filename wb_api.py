import asyncio
from typing import List
from datetime import datetime
import aiohttp
import logging

from typing import List, Dict, Any

logger = logging.getLogger(__name__)
MAX_RETRIES = 3
RETRY_DELAY = 60  # —Å–µ–∫—É–Ω–¥ ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ

ACCEPTANCE_BASE_URL = "https://seller-analytics-api.wildberries.ru/api/v1/acceptance_report"
ACCEPTANCE_STATUS_CHECK_INTERVAL = 5  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞
ACCEPTANCE_MAX_WAIT_TIME = 300  # –º–∞–∫—Å. –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ (5 –º–∏–Ω—É—Ç)

PAID_STORAGE_BASE_URL = "https://seller-analytics-api.wildberries.ru/api/v1/paid_storage"
PAID_STORAGE_STATUS_CHECK_INTERVAL = 5  # —Å–µ–∫
PAID_STORAGE_MAX_WAIT_TIME = 300  # 5 –º–∏–Ω—É—Ç


# ========================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================

def _is_within_date_range(record: dict, start_dt: datetime, end_dt: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ lastChangeDate –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."""
    last_change_str = record.get("date")
    # last_change_str = record.get("lastChangeDate")
    if not last_change_str:
        return False
    try:
        last_change_dt = datetime.fromisoformat(
            last_change_str.replace("Z", "+00:00"))
        # and record.get("isCancel", False) == False
        return start_dt <= last_change_dt <= end_dt
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –∑–∞–ø–∏—Å–∏: {last_change_str}")
        return False


async def _fetch_with_simple_retry(
    session: aiohttp.ClientSession,
    url: str,
    headers: dict,
    params: dict,
    method_name: str,
) -> tuple[int, list | str]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ—Å—Ç—ã–º –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ."""
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            async with session.get(url, headers=headers, params=params, timeout=20) as resp:
                if resp.status == 200:
                    return 200, await resp.json()
                elif resp.status == 429:
                    logger.warning(
                        f"{method_name}: 429 Too Many Requests (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{MAX_RETRIES})")
                    if attempt < MAX_RETRIES:
                        await asyncio.sleep(RETRY_DELAY)
                        continue
                    else:
                        return 429, await resp.text()
                else:
                    return resp.status, await resp.text()
        except Exception as e:
            logger.error(f"{method_name}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
            if attempt < MAX_RETRIES:
                await asyncio.sleep(RETRY_DELAY)
                continue
            else:
                raise
    raise RuntimeError("–ù–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ")


# ========================================
# –ï–ñ–ï–î–ù–ï–í–ù–´–ï –û–¢–ß–Å–¢–´
# ========================================

async def get_wb_orders(api_key: str, date_from: str, date_to: str) -> List[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ /api/v1/supplier/orders
    Args:
        api_key (str): API-–∫–ª—é—á –ø—Ä–æ–¥–∞–≤—Ü–∞.
        date_from (str): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".
        date_to (str): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".

    Returns:
        list[dict]: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:

        üìÖ **–î–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å—ã**
            - `date` ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ (–ú–°–ö, UTC+3)
            - `lastChangeDate` ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ú–°–ö, UTC+3)
            - `isCancel` ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
            - `cancelDate` ‚Äî –¥–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)

        üìç **–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Å–∫–ª–∞–¥**
            - `warehouseName` ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ—Ç–≥—Ä—É–∑–∫–∏
            - `warehouseType` ‚Äî —Ç–∏–ø —Å–∫–ª–∞–¥–∞ ("–°–∫–ª–∞–¥ WB"/"–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞")
            - `countryName` ‚Äî —Å—Ç—Ä–∞–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            - `oblastOkrugName` ‚Äî —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥
            - `regionName` ‚Äî —Ä–µ–≥–∏–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏

        üè∑ **–¢–æ–≤–∞—Ä –∏ –∞—Ä—Ç–∏–∫—É–ª—ã**
            - `nmId` ‚Äî –∞—Ä—Ç–∏–∫—É–ª Wildberries
            - `supplierArticle` ‚Äî –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞
            - `barcode` ‚Äî —à—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞
            - `brand` ‚Äî –±—Ä–µ–Ω–¥
            - `category` ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
            - `subject` ‚Äî –ø—Ä–µ–¥–º–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
            - `techSize` ‚Äî —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞

        üí∞ **–¶–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏**
            - `totalPrice` ‚Äî –∏—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ (–±–µ–∑ —Å–∫–∏–¥–æ–∫)
            - `discountPercent` ‚Äî –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
            - `priceWithDisc` ‚Äî —Ü–µ–Ω–∞ —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
            - `spp` ‚Äî —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ Wildberries
            - `finishedPrice` ‚Äî –∏—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ (—Å–æ –≤—Å–µ–º–∏ —Å–∫–∏–¥–∫–∞–º–∏ –∫—Ä–æ–º–µ WB –ö–æ—à–µ–ª—å–∫–∞)

        üì¶ **–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã**
            - `incomeID` ‚Äî –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏
            - `sticker` ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä–∞
            - `gNumber` ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä–∑–∏–Ω—ã –∑–∞–∫–∞–∑–∞
            - `srid` ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            - `isSupply` ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏
            - `isRealization` ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ –¥–æ–≥–æ–≤–æ—Ä–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    """

    url = "https://statistics-api.wildberries.ru/api/v1/supplier/orders"
    headers = {"Authorization": api_key}
    all_orders = []

    start_dt = datetime.fromisoformat(f"{date_from}T00:00:00")
    end_dt = datetime.fromisoformat(f"{date_to}T23:59:59")
    current_date_from = f"{date_from}T00:00:00"

    async with aiohttp.ClientSession() as session:
        while True:
            params = {"dateFrom": current_date_from, "flag": 0}

            status, data_or_text = await _fetch_with_simple_retry(
                session, url, headers, params, "Orders API"
            )

            if status == 200:
                data = data_or_text
                if not data:
                    break
                all_orders.extend(data)

                last_change_date = data[-1].get("lastChangeDate")
                if not last_change_date:
                    logger.warning(
                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç lastChangeDate –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
                    break
                current_date_from = last_change_date

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                try:
                    last_dt = datetime.fromisoformat(
                        last_change_date.replace("Z", "+00:00"))
                    if last_dt > end_dt:
                        break
                except ValueError:
                    pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å

            else:
                logger.error(f"Orders API –æ—à–∏–±–∫–∞: {status} ‚Äî {data_or_text}")
                break

    return [r for r in all_orders if _is_within_date_range(r, start_dt, end_dt)]


### –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–õ–ê–°–¨ ###

async def get_wb_sales(api_key: str, date_from: str, date_to: str) -> List[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ /api/v1/supplier/sales
    Args:
        api_key (str): API-–∫–ª—é—á –ø—Ä–æ–¥–∞–≤—Ü–∞.
        date_from (str): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".
        date_to (str): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".

    Returns:
        list[dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:

        üìÖ **–î–∞—Ç—ã –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã**
            - `date` ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏ (–ú–°–ö, UTC+3)
            - `lastChangeDate` ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ú–°–ö, UTC+3)
            - `saleID` ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏ (S********** ‚Äî –ø—Ä–æ–¥–∞–∂–∞, R********** ‚Äî –≤–æ–∑–≤—Ä–∞—Ç)
            - `srid` ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            - `gNumber` ‚Äî ID –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è

        üìç **–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Å–∫–ª–∞–¥**
            - `warehouseName` ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ—Ç–≥—Ä—É–∑–∫–∏
            - `warehouseType` ‚Äî —Ç–∏–ø —Å–∫–ª–∞–¥–∞ ("–°–∫–ª–∞–¥ WB"/"–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞")
            - `countryName`, `oblastOkrugName`, `regionName` ‚Äî –≥–µ–æ–≥—Ä–∞—Ñ–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏

        üè∑ **–¢–æ–≤–∞—Ä –∏ –∞—Ä—Ç–∏–∫—É–ª—ã**
            - `nmId` ‚Äî –∞—Ä—Ç–∏–∫—É–ª Wildberries
            - `supplierArticle` ‚Äî –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞
            - `barcode` ‚Äî —à—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞
            - `brand`, `category`, `subject` ‚Äî —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            - `techSize` ‚Äî —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
            - `incomeID` ‚Äî –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏

        üí∞ **–¶–µ–Ω—ã –∏ —Ñ–∏–Ω–∞–Ω—Å—ã**
            - `totalPrice` ‚Äî –∏—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ (–±–µ–∑ —Å–∫–∏–¥–æ–∫)
            - `discountPercent` ‚Äî –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
            - `priceWithDisc` ‚Äî —Ü–µ–Ω–∞ —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
            - `spp` ‚Äî —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ Wildberries
            - `finishedPrice` ‚Äî —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—Å–æ –≤—Å–µ–º–∏ —Å–∫–∏–¥–∫–∞–º–∏)
            - `forPay` ‚Äî —Å—É–º–º–∞ –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ø—Ä–æ–¥–∞–≤—Ü—É
            - `paymentSaleAmount` ‚Äî —Å–∫–∏–¥–∫–∞ –∑–∞ –æ–ø–ª–∞—Ç—É WB –ö–æ—à–µ–ª—å–∫–æ–º

        üì¶ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**
            - `isSupply`, `isRealization` ‚Äî –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
            - `sticker` ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä–∞
    """

    url = "https://statistics-api.wildberries.ru/api/v1/supplier/sales"
    headers = {"Authorization": api_key}
    all_sales = []

    start_dt = datetime.fromisoformat(f"{date_from}T00:00:00")
    end_dt = datetime.fromisoformat(f"{date_to}T23:59:59")
    current_date_from = f"{date_from}T00:00:00"

    async with aiohttp.ClientSession() as session:
        while True:
            params = {"dateFrom": current_date_from, "flag": 0}

            status, data_or_text = await _fetch_with_simple_retry(
                session, url, headers, params, "Sales API"
            )

            if status == 200:
                data = data_or_text
                if not data:
                    break
                all_sales.extend(data)

                last_change_date = data[-1].get("lastChangeDate")
                if not last_change_date:
                    logger.warning(
                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç lastChangeDate –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
                    break
                current_date_from = last_change_date

                try:
                    last_dt = datetime.fromisoformat(
                        last_change_date.replace("Z", "+00:00"))
                    if last_dt > end_dt:
                        break
                except ValueError:
                    pass

            else:
                logger.error(f"Sales API –æ—à–∏–±–∫–∞: {status} ‚Äî {data_or_text}")
                break

    return [r for r in all_sales if _is_within_date_range(r, start_dt, end_dt)]


### –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–õ–ê–°–¨ ###

async def get_wb_acceptance_report(
    api_key: str,
    date_from: str,
    date_to: str,
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á—ë—Ç –æ –ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–µ —á–µ—Ä–µ–∑ API (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Üí –æ–∂–∏–¥–∞–Ω–∏–µ ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞)
    Args:
        api_key (str): API-–∫–ª—é—á –ø—Ä–æ–¥–∞–≤—Ü–∞.
        date_from (str): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".
        date_to (str): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".

    Returns:
        list[dict]: –ó–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:

        üì¶ **–ü—Ä–∏—ë–º–∫–∞ –∏ –ø–æ—Å—Ç–∞–≤–∫–∞**
            - `shkCreateDate` ‚Äî –¥–∞—Ç–∞ –ø—Ä–∏—ë–º–∫–∏ —Ç–æ–≤–∞—Ä–∞
            - `giCreateDate` ‚Äî –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏
            - `incomeId` ‚Äî –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏
            - `count` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —à—Ç.

        üè∑ **–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞**
            - `nmID` ‚Äî –∞—Ä—Ç–∏–∫—É–ª Wildberries
            - `subjectName` ‚Äî –ø—Ä–µ–¥–º–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞

        üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å**
            - `total` ‚Äî —Å—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏—ë–º–∫–∏ (—Ä—É–±–ª–∏ —Å –∫–æ–ø–µ–π–∫–∞–º–∏)
    """

    headers = {"Authorization": api_key}
    start_dt = datetime.fromisoformat(f"{date_from}T00:00:00")
    end_dt = datetime.fromisoformat(f"{date_to}T23:59:59")

    async with aiohttp.ClientSession() as session:
        # 1. –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        payload = {
            "dateFrom": date_from,
            "dateTo": date_to
        }
        status, data = await _fetch_with_simple_retry(
            session,
            ACCEPTANCE_BASE_URL,
            headers,
            payload,
            "Acceptance Report Create"
        )
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
        if status != 200:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç—á—ë—Ç –ø—Ä–∏—ë–º–∫–∏: {status} ‚Äî {data}")
            return []

        task_id = data.get("data", {}).get("taskId")
        if not task_id:
            logger.error("–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç taskId")
            return []

        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç—á—ë—Ç –ø—Ä–∏—ë–º–∫–∏: {task_id}")

        # 2. –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        wait_time = 0
        while wait_time < ACCEPTANCE_MAX_WAIT_TIME:
            status_url = f"{ACCEPTANCE_BASE_URL}/tasks/{task_id}/status"
            try:
                async with session.get(status_url, headers=headers, timeout=10) as resp:
                    if resp.status == 200:
                        status_data = await resp.json()
                        task_status = status_data.get("data").get("status")
                        if task_status == "done":
                            logger.info("–û—Ç—á—ë—Ç –æ –ø—Ä–∏—ë–º–∫–µ –≥–æ—Ç–æ–≤.")
                            break
                        elif task_status == "error":
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {status_data}")
                            return []
                        # else: "in_progress" –∏–ª–∏ –¥—Ä—É–≥–æ–π ‚Äî –∂–¥—ë–º
                    else:
                        logger.warning(
                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏: {resp.status}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")

            await asyncio.sleep(ACCEPTANCE_STATUS_CHECK_INTERVAL)
            wait_time += ACCEPTANCE_STATUS_CHECK_INTERVAL
        else:
            logger.error(
                "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–∏—ë–º–∫–µ")
            return []

        # 3. –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç
        download_url = f"{ACCEPTANCE_BASE_URL}/tasks/{task_id}/download"
        try:
            async with session.get(download_url, headers=headers, timeout=30) as resp:
                if resp.status == 200:
                    report_data = await resp.json()
                    logger.info(
                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(report_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ—Ç—á—ë—Ç–∞ –ø—Ä–∏—ë–º–∫–∏.")
                    logger.info(f"{report_data}")
                    filtered = []
                    for record in report_data:
                        record_date_str = record.get(
                            "shkCreateDate")  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
                        if not record_date_str:
                            continue
                        try:
                            record_date = datetime.fromisoformat(
                                record_date_str)
                            if start_dt.date() <= record_date.date() <= end_dt.date():
                                filtered.append(record)
                        except ValueError:
                            logger.warning(
                                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ shkCreateDate: {record_date_str}")
                    return filtered
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {resp.status} ‚Äî {await resp.text()}")
                    return []
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            return []


### –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–õ–ê–°–¨ ###

async def get_wb_paid_storage_report(
    api_key: str,
    date_from: str,
    date_to: str,
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á—ë—Ç –æ –ø–ª–∞—Ç–Ω–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Üí –æ–∂–∏–¥–∞–Ω–∏–µ ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞)
    Args:
        api_key (str): API-–∫–ª—é—á –ø—Ä–æ–¥–∞–≤—Ü–∞.
        date_from (str): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".
        date_to (str): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".

    Returns:
        list[dict]: –ó–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–Ω–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:

        üìÖ **–î–∞—Ç—ã –∏ —Ä–∞—Å—á—ë—Ç—ã**
            - `date` ‚Äî –¥–∞—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞/–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞
            - `originalDate` ‚Äî –¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ (–ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ)
            - `calcType` ‚Äî —Å–ø–æ—Å–æ–± —Ä–∞—Å—á—ë—Ç–∞
            - `tariffFixDate` ‚Äî –¥–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞
            - `tariffLowerDate` ‚Äî –¥–∞—Ç–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞

        üìç **–°–∫–ª–∞–¥—ã –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã**
            - `warehouse` ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
            - `officeId` ‚Äî ID —Å–∫–ª–∞–¥–∞
            - `warehouseCoef` ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–ª–∞–¥–∞
            - `logWarehouseCoef` ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è

        üè∑ **–¢–æ–≤–∞—Ä –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã**
            - `nmId` ‚Äî –∞—Ä—Ç–∏–∫—É–ª Wildberries
            - `vendorCode` ‚Äî –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞
            - `chrtId` ‚Äî ID —Ä–∞–∑–º–µ—Ä–∞
            - `barcode` ‚Äî —à—Ç—Ä–∏—Ö–∫–æ–¥
            - `size` ‚Äî —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
            - `brand`, `subject` ‚Äî –±—Ä–µ–Ω–¥ –∏ –ø—Ä–µ–¥–º–µ—Ç
            - `giId` ‚Äî ID –ø–æ—Å—Ç–∞–≤–∫–∏

        üìä **–û–±—ä—ë–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ**
            - `volume` ‚Äî –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞
            - `barcodesCount` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞
            - `palletCount` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–ª–µ—Ç
            - `palletPlaceCode` ‚Äî –∫–æ–¥ –ø–∞–ª–ª–µ—Ç–æ–º–µ—Å—Ç–∞

        üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–∫–∏–¥–∫–∏**
            - `warehousePrice` ‚Äî —Å—É–º–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            - `loyaltyDiscount` ‚Äî —Å–∫–∏–¥–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (—Ä—É–±–ª–∏)
    """

    headers = {"Authorization": api_key}
    start_dt = datetime.fromisoformat(f"{date_from}T00:00:00")
    end_dt = datetime.fromisoformat(f"{date_to}T23:59:59")

    async with aiohttp.ClientSession() as session:
        # 1. –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ (GET —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
        params = {
            "dateFrom": date_from,
            "dateTo": date_to
        }
        status, data = await _fetch_with_simple_retry(
            session,
            PAID_STORAGE_BASE_URL,
            headers,
            params,
            "Paid Storage Report Create"
        )

        if status != 200:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç—á—ë—Ç –ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {status} ‚Äî {data}")
            return []

        task_id = data.get("data", {}).get("taskId")
        if not task_id:
            logger.error("–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç taskId")
            return []

        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç—á—ë—Ç –ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {task_id}")

        # 2. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        wait_time = 0
        while wait_time < PAID_STORAGE_MAX_WAIT_TIME:
            status_url = f"{PAID_STORAGE_BASE_URL}/tasks/{task_id}/status"
            try:
                async with session.get(status_url, headers=headers, timeout=10) as resp:
                    if resp.status == 200:
                        status_data = await resp.json()
                        task_status = status_data.get("data", {}).get("status")
                        if task_status == "done":
                            logger.info("–û—Ç—á—ë—Ç –æ –ø–ª–∞—Ç–Ω–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ç–æ–≤.")
                            break
                        elif task_status == "error":
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {status_data}")
                            return []
                    else:
                        logger.warning(
                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏: {resp.status}")
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

            await asyncio.sleep(PAID_STORAGE_STATUS_CHECK_INTERVAL)
            wait_time += PAID_STORAGE_STATUS_CHECK_INTERVAL
        else:
            logger.error(
                "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞ –æ –ø–ª–∞—Ç–Ω–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏–∏")
            return []

        # 3. –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç
        download_url = f"{PAID_STORAGE_BASE_URL}/tasks/{task_id}/download"
        try:
            async with session.get(download_url, headers=headers, timeout=30) as resp:
                if resp.status == 200:
                    report_data = await resp.json()
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—é "date" (—Ñ–æ—Ä–º–∞—Ç: "YYYY-MM-DD")
                    filtered = []
                    for record in report_data:
                        record_date_str = record.get("date")
                        if not record_date_str:
                            continue
                        try:
                            record_date = datetime.fromisoformat(
                                record_date_str)
                            if start_dt.date() <= record_date.date() <= end_dt.date():
                                filtered.append(record)
                        except ValueError:
                            logger.warning(
                                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {record_date_str}")
                    return filtered
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {resp.status} ‚Äî {await resp.text()}")
                    return []
        except Exception as e:
            logger.error(
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return []


# ========================================
# –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –û–¢–ß–Å–¢–´
# ========================================

async def get_wb_weekly_report(api_key: str, date_from: str, date_to: str) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —á–µ—Ä–µ–∑ /api/v5/supplier/reportDetailByPeriod
    Args:
        api_key (str): API-–∫–ª—é—á –ø—Ä–æ–¥–∞–≤—Ü–∞.
        date_from (str): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".
        date_to (str): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD".

    Returns:
        list[dict]: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á—ë—Ç–∞. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:

        üì¶ **–¢–æ–≤–∞—Ä –∏ –æ–ø–µ—Ä–∞—Ü–∏—è**
            - `rr_dt` ‚Äî –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            - `doc_type_name` ‚Äî —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø—Ä–æ–¥–∞–∂–∞, –≤–æ–∑–≤—Ä–∞—Ç –∏ —Ç.–¥.)
            - `nm_id`, `brand_name`, `subject_name`, `sa_name`, `barcode` ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞
            - `quantity` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            - `retail_price`, `retail_price_withdisc_rub`, `retail_amount` ‚Äî —Ü–µ–Ω—ã –∏ —Å—É–º–º—ã
            - `sale_percent` ‚Äî —Å–∫–∏–¥–∫–∞, %

        üöö **–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –∫–æ–º–∏—Å—Å–∏–∏**
            - `delivery_rub`, `rebill_logistic_cost`, `storage_fee`, `acceptance`, `deduction` ‚Äî –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            - `penalty` ‚Äî —à—Ç—Ä–∞—Ñ—ã
            - `bonus_type_name` ‚Äî –≤–∏–¥ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            - `srv_dbs` ‚Äî –ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (bool)

        üí≥ **–§–∏–Ω–∞–Ω—Å—ã –∏ –≤—ã–ø–ª–∞—Ç—ã**
            - `ppvz_for_pay` ‚Äî –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ø—Ä–æ–¥–∞–≤—Ü—É
            - `ppvz_sales_commission`, `ppvz_reward`, `ppvz_vw`, `ppvz_vw_nds` ‚Äî –∫–æ–º–∏—Å—Å–∏–∏ –∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è WB
            - `commission_percent`, `ppvz_kvw_prc`, `ppvz_spp_prc` ‚Äî –ø—Ä–æ—Ü–µ–Ω—Ç –ö–í–í –∏ –°–ü–ü
            - `acquiring_fee`, `acquiring_percent`, `payment_processing`, `acquiring_bank` ‚Äî —ç–∫–≤–∞–π—Ä–∏–Ω–≥

        üí∞ **–°–∫–∏–¥–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏**
            - `additional_payment` ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
            - `deduction` ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏—è (–≤ —Ç.—á. —Ä–µ–∫–ª–∞–º–∞)
            - `cashback_amount`, `cashback_discount`, `cashback_commission_change` ‚Äî –ª–æ—è–ª—å–Ω–æ—Å—Ç—å/–∫—ç—à–±—ç–∫
            - `installment_cofinancing_amount`, `supplier_promo`, `product_discount_for_report` ‚Äî –ø—Ä–æ–º–æ-—Å–∫–∏–¥–∫–∏
            - `rebill_logistic_org` ‚Äî –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏

        üè∑ **–ü—Ä–æ—á–µ–µ**
            - `office_name`, `ppvz_office_name` ‚Äî —Å–∫–ª–∞–¥—ã –∏ –æ—Ñ–∏—Å—ã
            - `supplier_oper_name` ‚Äî –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            - `srid`, `order_uid` ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–∫–∞–∑–æ–≤
            - `is_legal_entity` ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ B2B-–ø—Ä–æ–¥–∞–∂–∏
    """
    
    url = "https://statistics-api.wildberries.ru/api/v5/supplier/reportDetailByPeriod"
    headers = {
        "Authorization": api_key,
        "Content-Type": "application/json"
    }
    params = {
        "dateFrom": date_from,
        "dateTo": date_to
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(
                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ weekly-–æ—Ç—á—ë—Ç–∞")
                    return data
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {resp.status} ‚Äî {await resp.text()}")
                    return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ weekly-–æ—Ç—á—ë—Ç–∞: {e}")
            return []


# ========================================
# –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================

async def get_supplier_name(api_key: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ Wildberries API —á–µ—Ä–µ–∑ /api/v1/seller-info.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç tradeMark, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ name.
    """
    url = "https://common-api.wildberries.ru/api/v1/seller-info"
    headers = {"Authorization": api_key}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers, timeout=10) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    seller_info = data.get("data", {})
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞: {data}")
                    trade_mark = seller_info.get("tradeMark")
                    legal_name = data.get("name", "")

                    return legal_name.strip()
                else:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å seller-info: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return "–ú–∞–≥–∞–∑–∏–Ω"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
            return "–ú–∞–≥–∞–∑–∏–Ω"
